const r="SharedWorker"in globalThis;class e{ActualWorker;constructor(e,t){this.ActualWorker=r?new SharedWorker(e,t):new Worker(e,t)}get onmessage(){return r?this.ActualWorker?.port.onmessage:this.ActualWorker.onmessage}set onmessage(e){r?this.ActualWorker.port.onmessage=e:this.ActualWorker.onmessage=e}get onmessageerror(){return r?this.ActualWorker?.port.onmessageerror:this.ActualWorker.onmessageerror}set onmessageerror(e){r?this.ActualWorker.port.onmessageerror=e:this.ActualWorker.onmessageerror=e}start(){if(r)return this.ActualWorker?.port.start()}postMessage(e,t){return r?this.ActualWorker?.port.postMessage(e,t):this.ActualWorker.postMessage(e,t)}terminate(){return r?this.ActualWorker?.port.close():this.ActualWorker.terminate()}close(){return this.terminate()}get port(){return r?this.ActualWorker.port:this.ActualWorker}get onerror(){return this.ActualWorker.onerror}set onerror(r){this.ActualWorker.onerror=r}addEventListener(e,t,o){return r&&"error"!==e?this.ActualWorker?.port.addEventListener(e,t,o):this.ActualWorker.addEventListener(e,t,o)}removeEventListener(e,t,o){return r&&"error"!==e?this.ActualWorker?.port.removeEventListener(e,t,o):this.ActualWorker.removeEventListener(e,t,o)}dispatchEvent(r){return this.ActualWorker.dispatchEvent(r)}}export{e as SharedWorkerPolyfill,r as SharedWorkerSupported,e as default};
