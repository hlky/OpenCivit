function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import history from "instantsearch.js/es/lib/routers/history.js";
import { stripLocaleFromUrl } from "./utils/stripLocaleFromUrl.js";
export function createInstantSearchRouterNext(options) {
  var _ref = options || {},
    beforePopState = _ref.beforePopState,
    singletonRouter = _ref.singletonRouter,
    serverUrl = _ref.serverUrl,
    beforeStart = _ref.beforeStart,
    beforeDispose = _ref.beforeDispose,
    routerOptions = _ref.routerOptions;
  var handler;
  var ownBeforePopState = function ownBeforePopState() {
    return true;
  };

  // If we're rendering on the server, we create a simpler router
  if (typeof window === 'undefined') {
    return history(_objectSpread({
      getLocation: function getLocation() {
        return new URL(serverUrl);
      }
    }, routerOptions));
  }

  /**
   * Marker to skip `routeChangeComplete` event when the push comes from the router itself.
   */
  var lastPushFromThis = false;
  var router = history(_objectSpread({
    start: function start(onUpdate) {
      var _singletonRouter$rout;
      if (beforeStart) {
        beforeStart(onUpdate);
      }
      var initialPathname = singletonRouter.pathname;
      handler = function handler() {
        // Without this check, we would trigger an unnecessary search when navigating
        // to a page without InstantSearch
        if (singletonRouter.pathname === initialPathname && !lastPushFromThis) {
          onUpdate();
        }
        lastPushFromThis = false;
      };
      singletonRouter.events.on('routeChangeComplete', handler);
      if ((_singletonRouter$rout = singletonRouter.router) !== null && _singletonRouter$rout !== void 0 && _singletonRouter$rout._bps) {
        ownBeforePopState = singletonRouter.router._bps;
      }
      function libraryBeforePopState() {
        var previousPathname = singletonRouter.asPath.split('?')[0];
        var nextPathname = new URL(window.location.href).pathname;

        // We strip the locale from the pathname if it's present
        nextPathname = stripLocaleFromUrl(nextPathname, singletonRouter.locale, previousPathname !== '/');

        // We only want to trigger a server request when going back/forward to a different page
        return previousPathname !== nextPathname;
      }
      singletonRouter.beforePopState(function (state) {
        if (beforePopState) {
          return beforePopState({
            state: state,
            libraryBeforePopState: libraryBeforePopState,
            ownBeforePopState: ownBeforePopState
          });
        }
        return libraryBeforePopState();
      });
    },
    dispose: function dispose() {
      if (beforeDispose) {
        beforeDispose();
      }
      singletonRouter.events.off('routeChangeComplete', handler);
      singletonRouter.beforePopState(ownBeforePopState);
    },
    push: function push(newUrl) {
      // We need to do this because there's an error when using i18n on the
      // root path it says for example `pages/fr.js` doesn't exist
      var url = stripLocaleFromUrl(newUrl, singletonRouter.locale);

      // No need to provide the second argument, Next.js will know what to do
      singletonRouter.push(url, undefined, {
        shallow: true
      });
      lastPushFromThis = true;
    }
  }, routerOptions));
  router._isNextRouter = true;
  router.$$type = 'ais.nextjs';
  return router;
}